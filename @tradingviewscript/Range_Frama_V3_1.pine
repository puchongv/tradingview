//@version=5
indicator(title="Range FRAMA V3.1 - Multiple Timeframe Winrate Analysis", shorttitle="RF V3.1", overlay=true, max_labels_count=500)

// ===========================
// Base inputs (Range Filter)
// ===========================
upColor   = color.white
midColor  = #90bff9
downColor = color.blue

src = input(defval=close, title="Source")
per = input.int(defval=100, minval=1, title="Sampling Period")
mult = input.float(defval=3.0, minval=0.1, title="Range Multiplier")

// ===========================
// FRAMA settings (BB matched)
// ===========================
grp_FRAMA = "FRAMA Integration Settings"
use_frama_filter = input.bool(defval=true, title="Enable FRAMA Filter", group=grp_FRAMA)
frama_divot = input.int(defval=0, minval=0, maxval=10, title="FRAMA Divot (bars)", group=grp_FRAMA)

frama_length   = input.int(defval=26, minval=2, step=2, title="FRAMA Length (even only)", group=grp_FRAMA)
frama_distance = input.float(defval=1.5, minval=0.3, step=0.01, title="FRAMA Bands Distance", group=grp_FRAMA)

// ===========================
// Multiple Timeframe Winrate Settings (V3.1)
// ===========================
grp_WINRATE = "📊 Multiple Timeframe Win Rate Settings (V3.1)"
enable_10min = input.bool(defval=true, title="✅ Enable 10min Winrate", group=grp_WINRATE)
enable_30min = input.bool(defval=true, title="✅ Enable 30min Winrate", group=grp_WINRATE) 
enable_60min = input.bool(defval=true, title="✅ Enable 60min Winrate", group=grp_WINRATE)
start_date = input.time(timestamp("2025-01-01"), title="📅 Start Date", group=grp_WINRATE)
end_date = input.time(timestamp("2025-01-31"), title="📅 End Date", group=grp_WINRATE)
show_winrate = input.bool(defval=true, title="📈 Show Win Rate Display", group=grp_WINRATE)
force_reset = input.bool(defval=false, title="🔄 Force Reset Calculation", group=grp_WINRATE, tooltip="Check this to force recalculation when date range issues occur")


// ============================================================================
// Variable declarations
// ============================================================================
// Track RF entries to optionally mark losses in gray after interval
var array<float> rf_buy_entry_prices  = array.new<float>()
var array<int>   rf_buy_entry_times   = array.new<int>()
var array<int>   rf_buy_entry_bars    = array.new<int>()
var array<float> rf_sell_entry_prices = array.new<float>()
var array<int>   rf_sell_entry_times  = array.new<int>()
var array<int>   rf_sell_entry_bars   = array.new<int>()

// Calculate interval bars for loss detection (3 timeframes)
tf_sec = timeframe.in_seconds()
interval_bars_10 = math.max(1, math.round(10 * 60 / tf_sec))
interval_bars_30 = math.max(1, math.round(30 * 60 / tf_sec))
interval_bars_60 = math.max(1, math.round(60 * 60 / tf_sec))

// ============================================================================
// RANGE FILTER (original)
// ============================================================================
smoothrng(x, t, m) =>
    wper = t * 2 - 1
    avrng = ta.ema(math.abs(x - x[1]), t)
    ta.ema(avrng, wper) * m
smrng = smoothrng(src, per, mult)

rngfilt(x, r) =>
    _f = x
    _f := x > nz(_f[1]) ? (x - r < nz(_f[1]) ? nz(_f[1]) : x - r)
         : (x + r > nz(_f[1]) ? nz(_f[1]) : x + r)
    _f
filt = rngfilt(src, smrng)

upward = 0.0
upward := filt > filt[1] ? nz(upward[1]) + 1 : filt < filt[1] ? 0 : nz(upward[1])
downward = 0.0
downward := filt < filt[1] ? nz(downward[1]) + 1 : filt > filt[1] ? 0 : nz(downward[1])

hband = filt + smrng
lband = filt - smrng

filtcolor = upward > 0 ? upColor : downward > 0 ? downColor : midColor
_barcol = src > filt and upward > 0 ? upColor : src < filt and downward > 0 ? downColor : midColor
plot(filt, color=filtcolor, linewidth=2, title="Range Filter")
pH = plot(hband, color=color.new(upColor, 70), title="High Target")
pL = plot(lband, color=color.new(downColor, 70), title="Low Target")
fill(pH, pL, color=color.new(color.gray, 95))
barcolor(_barcol)

// RANGE FILTER signals
longCond = (src > filt and upward > 0)
shortCond = (src < filt and downward > 0)
CondIni = 0
CondIni := longCond ? 1 : shortCond ? -1 : CondIni[1]
longCondition_original = longCond and CondIni[1] == -1
shortCondition_original = shortCond and CondIni[1] == 1

// ============================================================================
// FRAMA (exactly matched to BigBeluga for bands + "first-of-run" labels)
// ============================================================================

// --- internals
type frama_vars 
    float N1
    float N2
    float N3
    float HH
    float LL
    float Dimen 
    float alpha
var frama_vars v = frama_vars.new(0.,0.,0.,0.,0.,0.,0.)

var float Filt   = na
var float Filt1  = na
var float Filt2  = na

// price like BB
price = hl2

// volatility like BB (NOT ATR)
volatility = ta.sma(high - low, 200)

// N3
v.N3 := (ta.highest(high, frama_length) - ta.lowest(low, frama_length)) / frama_length

// N1
v.HH := high, v.LL := low
for i = 0 to frama_length/2 - 1
    if high[i] > v.HH
        v.HH := high[i]
    if low[i] < v.LL
        v.LL := low[i]
v.N1 := (v.HH - v.LL) / (frama_length/2)

// N2
v.HH := high[frama_length/2]
v.LL := low[frama_length/2]
for i = frama_length/2 to frama_length - 1
    if high[i] > v.HH
        v.HH := high[i]
    if low[i] < v.LL
        v.LL := low[i]
v.N2 := (v.HH - v.LL) / (frama_length/2)

// Dimen + alpha
if (v.N1 > 0 and v.N2 > 0 and v.N3 > 0)
    v.Dimen := (math.log(v.N1 + v.N2) - math.log(v.N3)) / math.log(2)
v.alpha := math.exp(-4.6 * (v.Dimen - 1))
v.alpha := math.max(math.min(v.alpha, 1), 0.01)

// Filt (EMA fractal) + SMA(5) smoothing like BB
Filt := na(Filt) ? price : v.alpha * price + (1 - v.alpha) * Filt[1]
Filt := ta.sma((bar_index < frama_length + 1) ? price : Filt, 5)

// Bands like BB
Filt1 := Filt + volatility * frama_distance
Filt2 := Filt - volatility * frama_distance

// raw breakout events (same condition name as BB)
_frama_break_up = ta.crossover(hlc3, Filt1) and barstate.isconfirmed
_frama_break_dn = ta.crossunder(hlc3, Filt2) and barstate.isconfirmed

// ---------- BB-style "first-of-run" labels ----------
var int _countUp = 0
var int _countDn = 0
if _frama_break_up
    _countDn := 0
    _countUp += 1
if _frama_break_dn
    _countUp := 0
    _countDn += 1

// labels identical logic: show only first of consecutive breaks
frama_label_up = _frama_break_up and _countUp == 1
frama_label_dn = _frama_break_dn and _countDn == 1

// For your combined logic, keep using the raw break flags (unchanged names below)
frama_break_up = _frama_break_up
frama_break_dn = _frama_break_dn

// ============================================================================
// RANGE + FRAMA combined (unchanged)
// ============================================================================
var int last_rf_bar = na
// Initialize RF signals to false each bar
range_frama_buy = false
range_frama_sell = false

// Track last seen bars of individual signals (R and F)
var int last_R_up_bar = na
var int last_R_dn_bar = na
var int last_F_up_bar = na
var int last_F_dn_bar = na

// Update last seen bars (use confirmed bar events)
if longCondition_original
    last_R_up_bar := bar_index
if shortCondition_original
    last_R_dn_bar := bar_index
if frama_break_up
    last_F_up_bar := bar_index
if frama_break_dn
    last_F_dn_bar := bar_index

if use_frama_filter
    block_period_active = not na(last_rf_bar) and (bar_index - last_rf_bar) <= frama_divot

    // Buy RF fires exactly on the later bar of the two within divot distance
    if not block_period_active and not na(last_R_up_bar) and not na(last_F_up_bar)
        distance_ok = math.abs(last_R_up_bar - last_F_up_bar) <= frama_divot
        latest_bar = math.max(last_R_up_bar, last_F_up_bar)
        if distance_ok and latest_bar == bar_index
            range_frama_buy := true

    // Sell RF fires exactly on the later bar of the two within divot distance
    if not block_period_active and not na(last_R_dn_bar) and not na(last_F_dn_bar)
        distance_ok_dn = math.abs(last_R_dn_bar - last_F_dn_bar) <= frama_divot
        latest_bar_dn = math.max(last_R_dn_bar, last_F_dn_bar)
        if distance_ok_dn and latest_bar_dn == bar_index
            range_frama_sell := true

if range_frama_buy or range_frama_sell
    last_rf_bar := bar_index

// Activate RF only when filter enabled
rf_buy_active  = use_frama_filter and range_frama_buy
rf_sell_active = use_frama_filter and range_frama_sell

// FIXED: When FRAMA filter is ON, ONLY show RF signals (not fallback to R)
longCondition  = use_frama_filter ? rf_buy_active  : longCondition_original
shortCondition = use_frama_filter ? rf_sell_active : shortCondition_original



// ============================================================================
// Multiple Timeframe Win-rate block (V3.1)
// ============================================================================
// 10min Winrate Variables
var int total_buy_signals_10 = 0, var int total_sell_signals_10 = 0
var int total_wins_10 = 0, var int total_losses_10 = 0
var array<float> buy_entry_prices_10 = array.new<float>(), var array<int> buy_entry_times_10 = array.new<int>()
var array<float> sell_entry_prices_10 = array.new<float>(), var array<int> sell_entry_times_10 = array.new<int>()

// 30min Winrate Variables
var int total_buy_signals_30 = 0, var int total_sell_signals_30 = 0
var int total_wins_30 = 0, var int total_losses_30 = 0
var array<float> buy_entry_prices_30 = array.new<float>(), var array<int> buy_entry_times_30 = array.new<int>()
var array<float> sell_entry_prices_30 = array.new<float>(), var array<int> sell_entry_times_30 = array.new<int>()

// 60min Winrate Variables
var int total_buy_signals_60 = 0, var int total_sell_signals_60 = 0
var int total_wins_60 = 0, var int total_losses_60 = 0
var array<float> buy_entry_prices_60 = array.new<float>(), var array<int> buy_entry_times_60 = array.new<int>()
var array<float> sell_entry_prices_60 = array.new<float>(), var array<int> sell_entry_times_60 = array.new<int>()

var int last_start_date = 0, var int last_end_date = 0
var string last_symbol = na, var string last_timeframe = na
var bool last_force_reset = false

// Enhanced Reset เมื่อเปลี่ยนวันที่, symbol, timeframe หรือ force reset
reset_condition = start_date != last_start_date or end_date != last_end_date or 
                 syminfo.ticker != last_symbol or timeframe.period != last_timeframe or 
                 force_reset != last_force_reset

if reset_condition
    // Reset 10min variables
    total_buy_signals_10 := 0, total_sell_signals_10 := 0
    total_wins_10 := 0, total_losses_10 := 0
    array.clear(buy_entry_prices_10), array.clear(buy_entry_times_10)
    array.clear(sell_entry_prices_10), array.clear(sell_entry_times_10)
    
    // Reset 30min variables  
    total_buy_signals_30 := 0, total_sell_signals_30 := 0
    total_wins_30 := 0, total_losses_30 := 0
    array.clear(buy_entry_prices_30), array.clear(buy_entry_times_30)
    array.clear(sell_entry_prices_30), array.clear(sell_entry_times_30)
    
    // Reset 60min variables
    total_buy_signals_60 := 0, total_sell_signals_60 := 0
    total_wins_60 := 0, total_losses_60 := 0
    array.clear(buy_entry_prices_60), array.clear(buy_entry_times_60)
    array.clear(sell_entry_prices_60), array.clear(sell_entry_times_60)
    
    // Update last values
    last_start_date := start_date, last_end_date := end_date
    last_symbol := syminfo.ticker, last_timeframe := timeframe.period
    last_force_reset := force_reset

in_date_range = time >= start_date and time <= end_date

// นับสัญญาณ RF เมื่อเกิด (3 timeframes)
if range_frama_buy and in_date_range
    if enable_10min
        total_buy_signals_10 += 1
        array.push(buy_entry_prices_10, close)
        array.push(buy_entry_times_10, time)
    if enable_30min
        total_buy_signals_30 += 1
        array.push(buy_entry_prices_30, close)
        array.push(buy_entry_times_30, time)
    if enable_60min
        total_buy_signals_60 += 1
        array.push(buy_entry_prices_60, close)
        array.push(buy_entry_times_60, time)

if range_frama_sell and in_date_range
    if enable_10min
        total_sell_signals_10 += 1
        array.push(sell_entry_prices_10, close)
        array.push(sell_entry_times_10, time)
    if enable_30min
        total_sell_signals_30 += 1
        array.push(sell_entry_prices_30, close)
        array.push(sell_entry_times_30, time)
    if enable_60min
        total_sell_signals_60 += 1
        array.push(sell_entry_prices_60, close)
        array.push(sell_entry_times_60, time)

// 10min Winrate Calculation
if enable_10min and array.size(buy_entry_prices_10) > 0
    for i = array.size(buy_entry_prices_10) - 1 to 0
        entry_time = array.get(buy_entry_times_10, i)
        entry_price = array.get(buy_entry_prices_10, i)
        interval_time = entry_time + (10 * 60 * 1000)
        if time >= interval_time
            future_price = close
            if future_price > entry_price
                total_wins_10 += 1
            else
                total_losses_10 += 1
            array.remove(buy_entry_prices_10, i)
            array.remove(buy_entry_times_10, i)

if enable_10min and array.size(sell_entry_prices_10) > 0
    for i = array.size(sell_entry_prices_10) - 1 to 0
        entry_time = array.get(sell_entry_times_10, i)
        entry_price = array.get(sell_entry_prices_10, i)
        interval_time = entry_time + (10 * 60 * 1000)
        if time >= interval_time
            future_price = close
            if future_price < entry_price
                total_wins_10 += 1
            else
                total_losses_10 += 1
            array.remove(sell_entry_prices_10, i)
            array.remove(sell_entry_times_10, i)

// 30min Winrate Calculation
if enable_30min and array.size(buy_entry_prices_30) > 0
    for i = array.size(buy_entry_prices_30) - 1 to 0
        entry_time = array.get(buy_entry_times_30, i)
        entry_price = array.get(buy_entry_prices_30, i)
        interval_time = entry_time + (30 * 60 * 1000)
        if time >= interval_time
            future_price = close
            if future_price > entry_price
                total_wins_30 += 1
            else
                total_losses_30 += 1
            array.remove(buy_entry_prices_30, i)
            array.remove(buy_entry_times_30, i)

if enable_30min and array.size(sell_entry_prices_30) > 0
    for i = array.size(sell_entry_prices_30) - 1 to 0
        entry_time = array.get(sell_entry_times_30, i)
        entry_price = array.get(sell_entry_prices_30, i)
        interval_time = entry_time + (30 * 60 * 1000)
        if time >= interval_time
            future_price = close
            if future_price < entry_price
                total_wins_30 += 1
            else
                total_losses_30 += 1
            array.remove(sell_entry_prices_30, i)
            array.remove(sell_entry_times_30, i)

// 60min Winrate Calculation
if enable_60min and array.size(buy_entry_prices_60) > 0
    for i = array.size(buy_entry_prices_60) - 1 to 0
        entry_time = array.get(buy_entry_times_60, i)
        entry_price = array.get(buy_entry_prices_60, i)
        interval_time = entry_time + (60 * 60 * 1000)
        if time >= interval_time
            future_price = close
            if future_price > entry_price
                total_wins_60 += 1
            else
                total_losses_60 += 1
            array.remove(buy_entry_prices_60, i)
            array.remove(buy_entry_times_60, i)

if enable_60min and array.size(sell_entry_prices_60) > 0
    for i = array.size(sell_entry_prices_60) - 1 to 0
        entry_time = array.get(sell_entry_times_60, i)
        entry_price = array.get(sell_entry_prices_60, i)
        interval_time = entry_time + (60 * 60 * 1000)
        if time >= interval_time
            future_price = close
            if future_price < entry_price
                total_wins_60 += 1
            else
                total_losses_60 += 1
            array.remove(sell_entry_prices_60, i)
            array.remove(sell_entry_times_60, i)

// Calculate Multiple Timeframe Winrates
total_signals_10 = total_wins_10 + total_losses_10
total_signals_30 = total_wins_30 + total_losses_30  
total_signals_60 = total_wins_60 + total_losses_60
win_rate_10 = total_signals_10 > 0 ? (total_wins_10 / total_signals_10) * 100 : 0
win_rate_30 = total_signals_30 > 0 ? (total_wins_30 / total_signals_30) * 100 : 0
win_rate_60 = total_signals_60 > 0 ? (total_wins_60 / total_signals_60) * 100 : 0

// Multiple Timeframe Winrate Display (V3.1) - Enhanced
var label winrate_label = na
if show_winrate and barstate.islast
    frama_status = use_frama_filter ? "🟢 ENABLED" : "🔴 DISABLED"
    
    // Build label text with separate timeframe results
    label_text = "📊 RANGE FRAMA V3.1 - MULTI-TIMEFRAME ANALYSIS\n" +
                 "FRAMA Filter: " + frama_status + " | Divot: " + str.tostring(frama_divot) + " bars\n" +
                 "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
                 
    if enable_10min
        color_10 = win_rate_10 >= 60 ? "🟢" : win_rate_10 >= 50 ? "🟡" : "🔴"
        label_text += color_10 + " 10MIN: " + str.tostring(math.round(win_rate_10, 1)) + "% " +
                      "(" + str.tostring(total_wins_10) + "W/" + str.tostring(total_losses_10) + "L/" + str.tostring(total_signals_10) + "T)\n" +
                      "   📈 Buy: " + str.tostring(total_buy_signals_10) + " | 📉 Sell: " + str.tostring(total_sell_signals_10) + "\n\n"
                      
    if enable_30min
        color_30 = win_rate_30 >= 60 ? "🟢" : win_rate_30 >= 50 ? "🟡" : "🔴"
        label_text += color_30 + " 30MIN: " + str.tostring(math.round(win_rate_30, 1)) + "% " +
                      "(" + str.tostring(total_wins_30) + "W/" + str.tostring(total_losses_30) + "L/" + str.tostring(total_signals_30) + "T)\n" +
                      "   📈 Buy: " + str.tostring(total_buy_signals_30) + " | 📉 Sell: " + str.tostring(total_sell_signals_30) + "\n\n"
                      
    if enable_60min
        color_60 = win_rate_60 >= 60 ? "🟢" : win_rate_60 >= 50 ? "🟡" : "🔴"
        label_text += color_60 + " 60MIN: " + str.tostring(math.round(win_rate_60, 1)) + "% " +
                      "(" + str.tostring(total_wins_60) + "W/" + str.tostring(total_losses_60) + "L/" + str.tostring(total_signals_60) + "T)\n" +
                      "   📈 Buy: " + str.tostring(total_buy_signals_60) + " | 📉 Sell: " + str.tostring(total_sell_signals_60) + "\n\n"
    
    label_text += "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n" +
                  "📅 Analysis Period: " + str.format_time(start_date, "MMM dd") + " - " + str.format_time(end_date, "MMM dd, yyyy") + "\n" +
                  "🎯 For Binary Options Trading | Range + FRAMA Combined"
    
    if not na(winrate_label)
        label.delete(winrate_label)
    winrate_label := label.new(bar_index + 5, high, label_text, 
                              color=color.new(color.navy, 90), 
                              textcolor=color.white, 
                              style=label.style_label_left, 
                              size=size.normal)

// ============================================================================
// Plot & Alerts
// ============================================================================
// ซ่อนเส้น FRAMA ไว้ (ถ้าอยากตรวจสอบให้เปิด display=display.all)
plot(Filt,  color=color.new(color.yellow, 70), linewidth=1, title="FRAMA Filter", display=display.none)
plot(Filt1, color=color.new(color.green, 70),  linewidth=1, title="FRAMA Upper",  display=display.none)
plot(Filt2, color=color.new(color.red, 70),    linewidth=1, title="FRAMA Lower",  display=display.none)

// DEBUG MARKERS: Show R and F signals separately (tiny markers)
plotshape(longCondition_original, title="Range Signal ↑", text="R", textcolor=color.white, 
          style=shape.circle, size=size.tiny, location=location.belowbar, color=color.new(color.lime, 0))
plotshape(shortCondition_original, title="Range Signal ↓", text="R", textcolor=color.white, 
          style=shape.circle, size=size.tiny, location=location.abovebar, color=color.new(color.orange, 0))

plotshape(frama_label_up, title="FRAMA Signal ↑", text="F", textcolor=color.white, 
          style=shape.circle, size=size.tiny, location=location.belowbar, color=color.new(color.green, 0))
plotshape(frama_label_dn, title="FRAMA Signal ↓", text="F", textcolor=color.white, 
          style=shape.circle, size=size.tiny, location=location.abovebar, color=color.new(color.red, 0))

// สัญญาณหลัก RF V3.1 - Enhanced Visual
plotshape(use_frama_filter and range_frama_buy,  
          title="🎯 RF V3.1 BUY", text="BUY", textcolor=color.white, 
          style=shape.labelup, size=size.normal, location=location.belowbar, 
          color=color.new(color.lime, 10))

plotshape(use_frama_filter and range_frama_sell, 
          title="🎯 RF V3.1 SELL", text="SELL", textcolor=color.white, 
          style=shape.labeldown, size=size.normal, location=location.abovebar,  
          color=color.new(color.red, 10))

// Debug: แสดงค่าต่างๆ ใน Data Window (V3.1 - Multiple Timeframes)
plot(use_frama_filter ? 1 : 0, title="🔧 FRAMA Filter Status", display=display.data_window)
plot(range_frama_buy ? 1 : 0, title="📊 Range Frama Buy Signal", display=display.data_window)
plot(range_frama_sell ? 1 : 0, title="📊 Range Frama Sell Signal", display=display.data_window)
plot(in_date_range ? 1 : 0, title="📅 In Analysis Date Range", display=display.data_window)

// Debug: 10min Winrate Data
plot(enable_10min ? total_buy_signals_10 : na, title="📈 Buy Signals 10min", display=display.data_window)
plot(enable_10min ? total_sell_signals_10 : na, title="📉 Sell Signals 10min", display=display.data_window)
plot(enable_10min ? total_wins_10 : na, title="✅ Wins 10min", display=display.data_window)
plot(enable_10min ? total_losses_10 : na, title="❌ Losses 10min", display=display.data_window)
plot(enable_10min ? win_rate_10 : na, title="📊 Win Rate 10min %", display=display.data_window)

// Debug: 30min Winrate Data  
plot(enable_30min ? total_buy_signals_30 : na, title="📈 Buy Signals 30min", display=display.data_window)
plot(enable_30min ? total_sell_signals_30 : na, title="📉 Sell Signals 30min", display=display.data_window)
plot(enable_30min ? total_wins_30 : na, title="✅ Wins 30min", display=display.data_window)
plot(enable_30min ? total_losses_30 : na, title="❌ Losses 30min", display=display.data_window)
plot(enable_30min ? win_rate_30 : na, title="📊 Win Rate 30min %", display=display.data_window)

// Debug: 60min Winrate Data
plot(enable_60min ? total_buy_signals_60 : na, title="📈 Buy Signals 60min", display=display.data_window)
plot(enable_60min ? total_sell_signals_60 : na, title="📉 Sell Signals 60min", display=display.data_window)
plot(enable_60min ? total_wins_60 : na, title="✅ Wins 60min", display=display.data_window)
plot(enable_60min ? total_losses_60 : na, title="❌ Losses 60min", display=display.data_window)
plot(enable_60min ? win_rate_60 : na, title="📊 Win Rate 60min %", display=display.data_window)

// Enhanced Alerts for V3.1 with JSON format for n8n integration
alertcondition(longCondition,  
              title="🚀 Range FRAMA V3.1 - BUY Signal", 
              message='{"strategy": "Range_FRAMA_V3.1", "action": "BUY", "price": {{close}}, "time": "{{time}}", "timeframe": "{{interval}}", "winrate_10min": ' + str.tostring(win_rate_10) + ', "winrate_30min": ' + str.tostring(win_rate_30) + ', "winrate_60min": ' + str.tostring(win_rate_60) + '}')

alertcondition(shortCondition, 
              title="🚀 Range FRAMA V3.1 - SELL Signal", 
              message='{"strategy": "Range_FRAMA_V3.1", "action": "SELL", "price": {{close}}, "time": "{{time}}", "timeframe": "{{interval}}", "winrate_10min": ' + str.tostring(win_rate_10) + ', "winrate_30min": ' + str.tostring(win_rate_30) + ', "winrate_60min": ' + str.tostring(win_rate_60) + '}')

alertcondition(longCondition or shortCondition, 
              title="🚀 Range FRAMA V3.1 - Any Signal", 
              message="Range FRAMA V3.1 Signal Triggered - Check TradingView for details")

// ============================================================================
// V3.1 CHANGELOG & NOTES
// ============================================================================
// 📈 NEW FEATURES IN V3.1:
// ✅ Multiple Timeframe Winrate Analysis (10min, 30min, 60min)  
// ✅ Enhanced Reset Logic with Force Reset option
// ✅ Improved Visual Display with color-coded performance
// ✅ JSON Alert format for n8n/AutoRemote integration
// ✅ Enhanced Data Window debugging
// ✅ Better memory management for long date ranges
//
// 🎯 OPTIMIZED FOR:
// - Binary Options Trading (Binance Event Contract)
// - 10/30/60 minute expiry times  
// - Pattern-based signal generation
// - Real-time performance monitoring
// - Cross-platform automation (n8n + Tasker)
//
// 🔧 TROUBLESHOOTING:
// - If winrate values seem stuck: Check "Force Reset Calculation"
// - For date ranges > 20 days: Use shorter periods or force reset
// - For best results: Use on 1min-5min chart timeframes
//
// 📊 FOR BINARY OPTIONS SUCCESS:
// - Green (60%+): High confidence signals
// - Yellow (50-59%): Medium confidence  
// - Red (<50%): Avoid or use opposite direction
